////////////////////////////////////////////////////////////////////
// A simple continuous MDP for multiagent mars rover science mission.  
//
// The goal here is to harvest as many high-value mineral (within their
// designated radii) as possible within the time constraints.
//
// The movement model is of a second order integrator in 2d.
// The states for each rover is the x,y positions and velocities.
// The actions are acceleration in the x,y axes.
// A third action for each rover is mineral harvesting when possible.
//
////////////////////////////////////////////////////////////////////
domain mars_rover_science_mission {

    requirements = {
        reward-deterministic
    };

    types {
		rover : object;
		mineral : object;
	}; 

    pvariables {

        // rover constants
        MAX-POWER(rover): { non-fluent, int, default = 2 };                    // control norm constraint
        MAX-VEL(rover): { non-fluent, int, default = 5 };                    // control norm constraint

        // minerals constants
        MINERAL-AREA(mineral) : { non-fluent, int, default = 1 };               // mineral harvesting area
        MINERAL-VALUE(mineral): { non-fluent, real, default = 1 };              // mineral harvesting value
        MINERAL-POS-X(mineral): { non-fluent, int, default = 0 };               // mineral x location
        MINERAL-POS-Y(mineral): { non-fluent, int, default = 0 };               // mineral y location

        // states
        vel-x(rover)    : { state-fluent, int, default = 0 };                   // rover x direction velocity
        pos-x(rover)    : { state-fluent, int, default = 0 };                   // rover x position
        vel-y(rover)    : { state-fluent, int, default = 0 };                   // rover y velocity
        pos-y(rover)    : { state-fluent, int, default = 0 };                   // rover y position
        mineral-harvested(mineral) : { state-fluent, bool, default = false };   // if a mineral has been mineral mineral harvested or not

        // actions
        power-x(rover)      : { action-fluent, int, default = 0 };              // force input in x direction
        power-y(rover)      : { action-fluent, int, default = 0 };              // force input in y direction
        harvest(rover)      : { action-fluent, bool, default = false };         // mineral harvesting action
    };

    cpfs {

        vel-x'(?d) = 
            if (abs[vel-x(?d) + power-x(?d)] <= MAX-VEL(?d))
                then vel-x(?d) + power-x(?d)
            else if ([vel-x(?d) + power-x(?d)] > MAX-VEL(?d))
                then MAX-VEL(?d)
            else 
                -MAX-VEL(?d);
        vel-y'(?d) = 
            if (abs[vel-y(?d) + power-y(?d)] <= MAX-VEL(?d))
                then vel-y(?d) + power-y(?d)
            else if ( [vel-y(?d) + power-y(?d)] > MAX-VEL(?d))
                then MAX-VEL(?d)
            else 
                -MAX-VEL(?d);
        pos-x'(?d) = pos-x(?d) + vel-x(?d);
        pos-y'(?d) = pos-y(?d) + vel-y(?d);

        mineral-harvested'(?m) = mineral-harvested(?m) |
                ~mineral-harvested(?m) ^ [exists_{?d : rover}
                    [[pow[pos-x(?d) - MINERAL-POS-X(?m), 2] + pow[pos-y(?d) - MINERAL-POS-Y(?m), 2]] < pow[MINERAL-AREA(?m), 2] ^ harvest(?d)]];

    };

    // R = -sum u-x^2 + u-y^2 + sum minerals harvested - sum harvest actions
    reward = [-sum_{?d : rover} [[pow[power-x(?d), 2] + pow[power-y(?d), 2]] / 10]] +
             [sum_{?m : mineral }[if (exists_{?d : rover}
                        [[pow[pos-x(?d) - MINERAL-POS-X(?m), 2] + pow[pos-y(?d) - MINERAL-POS-Y(?m), 2]] < pow[MINERAL-AREA(?m), 2] 
						 ^ harvest(?d) ^ ~mineral-harvested(?m)])
                            then MINERAL-VALUE(?m)
                            else 0.0]]
             - [sum_{?d : rover} [harvest(?d)]];

    state-invariants {
        forall_{?m : mineral} [MINERAL-AREA(?m) > 0 ];
    };

    action-preconditions {
        forall_{?d : rover} [ power-x(?d) >= -MAX-POWER(?d) ];
        forall_{?d : rover} [ power-x(?d) <= MAX-POWER(?d) ];
        forall_{?d : rover} [ power-y(?d) >= -MAX-POWER(?d) ];
        forall_{?d : rover} [ power-y(?d) <= MAX-POWER(?d) ];
        forall_{?d : rover} [ power-x(?d) + power-y(?d) <= MAX-POWER(?d) ];
    };

    termination {
        forall_{?m : mineral} [ mineral-harvested(?m) ];
    };

}
