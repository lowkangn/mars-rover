////////////////////////////////////////////////////////////////////
// Simplified version of mars rover mission.  
// Relaxations:
// - Single agent
// - Minerals are point locations
// - Agent's movement based on displacement and not power
// - Problem space is a grid world
//
// The goal here is to harvest as many high-value mineral
// as possible within the time constraints.
//
// The states for each rover are the x,y positions.
// The actions are movement in the x,y axes.
// A third action for each rover is mineral harvesting when possible.
//
////////////////////////////////////////////////////////////////////
domain mars_rover_science_mission {

    requirements = {
        reward-deterministic
    };

    types {
		rover : object;
		mineral : object;
	}; 

    pvariables {

        // rover constants
        MAX-STEP(rover): { non-fluent, int, default = 1 };

        // minerals constants
        MINERAL-AREA(mineral) : { non-fluent, real, default = 0.2 };            // mineral harvesting area (included for rendering purposes)
        MINERAL-VALUE(mineral): { non-fluent, real, default = 1 };              // mineral harvesting value
        MINERAL-POS-X(mineral): { non-fluent, int, default = 0 };               // mineral x location
        MINERAL-POS-Y(mineral): { non-fluent, int, default = 0 };               // mineral y location

        // states
        pos-x(rover)    : { state-fluent, int, default = 0 };                   // rover x position
        pos-y(rover)    : { state-fluent, int, default = 0 };                   // rover y position
        mineral-harvested(mineral) : { state-fluent, bool, default = false };   // if a mineral has been mineral mineral harvested or not

        // actions
        move-x(rover)      : { action-fluent, int, default = 0 };               // force input in x direction
        move-y(rover)      : { action-fluent, int, default = 0 };               // force input in y direction
        harvest(rover)     : { action-fluent, bool, default = false };          // mineral harvesting action
    };

    cpfs {

        pos-x'(?d) = pos-x(?d) + move-x(?d);
        pos-y'(?d) = pos-y(?d) + move-y(?d);

        mineral-harvested'(?m) = mineral-harvested(?m) |
                ~mineral-harvested(?m) ^ [exists_{?d : rover}
                    [pos-x(?d) == MINERAL-POS-X(?m) ^ pos-y(?d) == MINERAL-POS-Y(?m) ^ harvest(?d)]];

    };

    // R = -sum u-x^2 + u-y^2 + sum minerals harvested - sum harvest actions
    reward = [-sum_{?d : rover} [ move-x(?d) + move-y(?d)]] +
             [sum_{?m : mineral }[if (exists_{?d : rover}
                        [pos-x(?d) == MINERAL-POS-X(?m) ^ pos-y(?d) == MINERAL-POS-Y(?m)
						 ^ harvest(?d) ^ ~mineral-harvested(?m)])
                            then MINERAL-VALUE(?m)
                            else 0.0]]
             - [sum_{?d : rover} [harvest(?d)]];

    action-preconditions {
        forall_{?d : rover} [ move-x(?d) >= -MAX-STEP(?d) ];
        forall_{?d : rover} [ move-x(?d) <= MAX-STEP(?d) ];
        forall_{?d : rover} [ move-y(?d) >= -MAX-STEP(?d) ];
        forall_{?d : rover} [ move-y(?d) <= MAX-STEP(?d) ];
    };

    termination {
        forall_{?m : mineral} [ mineral-harvested(?m) ];
    };
}
