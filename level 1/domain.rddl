////////////////////////////////////////////////////////////////////
// Level 1 env
// A simple continuous MDP for single agent mars rover science mission.  
//
// The goal here is to harvest as many high-value mineral (within their
// designated radii) as possible within the time constraints.
//
// The states for each rover is the x,y positions and velocities.
// The actions are movement in the x,y axes.
// A third action for each rover is mineral harvesting when possible.
//
////////////////////////////////////////////////////////////////////
domain mars_rover_science_mission {

    requirements = {
        reward-deterministic
    };

    types {
		rover : object;
		mineral : object;
	}; 

    pvariables {

        // rover constants
        MAX-POWER(rover): { non-fluent, real, default = 0.1 };         // control norm constraint
        SCALE-FACTOR    : { non-fluent, real, default = 0.1 };          // time scale factor for dynamic equations

        // minerals constants
        MINERAL-VALUE(mineral): { non-fluent, real, default = 1 };            // mineral harvesting value
        MINERAL-POS-X(mineral): { non-fluent, real, default = 0 };            // mineral x location
        MINERAL-POS-Y(mineral): { non-fluent, real, default = 0 };            // mineral y location
        MINERAL-AREA(mineral) : { non-fluent, real, default = 0.5 };          // mineral harvesting area (included for rendering purposes)

        // states
        pos-x(rover)    : { state-fluent, real, default = 0 };          // rover x position
        pos-y(rover)    : { state-fluent, real, default = 0 };          // rover y position
        mineral-harvested(mineral) : { state-fluent, bool, default = false }; // if a mineral has been mineral mineral harvested or not

        // actions
        move-x(rover)      : { action-fluent, real, default = 0 };     // force input in x direction
        move-y(rover)      : { action-fluent, real, default = 0 };     // force input in y direction
        harvest(rover)      : { action-fluent, bool, default = false }; // mineral harvesting action
    };

    cpfs {

        pos-x'(?d) = pos-x(?d) + move-x(?d);
        pos-y'(?d) = pos-y(?d) + move-y(?d); 

        // mineral harvesting to be within 0.01 to avoid floating point error
        mineral-harvested'(?m) = mineral-harvested(?m) |
                ~mineral-harvested(?m) ^ [exists_{?d : rover}
                    [sqrt [ pow[pos-x(?d) - MINERAL-POS-X(?m),2] + pow[pos-y(?d) - MINERAL-POS-Y(?m),2]] < 0.01 ^ harvest(?d)] ];

    };

    // R = -sum u-x^2 + u-y^2 + sum minerals harvested - sum harvest actions
    reward = [-sum_{?d : rover} [ 0.001*pow[move-x(?d), 2] + 0.001*pow[move-y(?d), 2]]] +
             [sum_{?m : mineral }[if (exists_{?d : rover}
                        [ sqrt [ pow[pos-x(?d) - MINERAL-POS-X(?m),2] + pow[pos-y(?d) - MINERAL-POS-Y(?m),2]] < 0.01
						 ^ harvest(?d) ^ ~mineral-harvested(?m)])
                            then MINERAL-VALUE(?m)
                            else 0.0]]
             - [sum_{?d : rover} [harvest(?d)]];

}
